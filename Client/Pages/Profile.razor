@page "/profile"
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Profile - Critter Wrangler</PageTitle>

<div class="page-container">
    @if (!AuthService.IsAuthenticated)
    {
        <div class="auth-required">
            <div class="lock-icon">üë§</div>
            <h2>Join the Adventure!</h2>
            <p>Create an account to track your progress and unlock achievements</p>
            <button class="btn-primary" @onclick="ShowAuth" data-testid="button-create-profile">
                Create Account
            </button>
        </div>
    }
    else
    {
        <div class="profile-content">
            <div class="profile-header">
                <div class="avatar" data-testid="avatar-profile">
                    @GetInitials()
                </div>
                <h1 data-testid="text-username">@(AuthService.CurrentUser?.Nickname ?? "Explorer")</h1>
                <p class="join-date" data-testid="text-join-date">Critter wrangler since @DateTime.Now.ToString("MMMM yyyy")</p>
            </div>

            @if (isLoading)
            {
                <div class="loading">Loading stats...</div>
            }
            else
            {
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" data-testid="text-collected-count">@collectedCount</div>
                        <div class="stat-label">Collected</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" data-testid="text-completion-rate">@completionRate%</div>
                        <div class="stat-label">Complete</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" data-testid="text-rare-count">@rareCount</div>
                        <div class="stat-label">Rare</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" data-testid="text-legendary-count">@legendaryCount</div>
                        <div class="stat-label">Legendary</div>
                    </div>
                </div>

                <div class="leaderboard">
                    <h2>üèÖ Top Explorers</h2>
                    @if (isLoadingLeaderboard)
                    {
                        <div class="loading">Loading leaderboard...</div>
                    }
                    else if (topExplorers != null && topExplorers.Any())
                    {
                        <div class="leaderboard-list">
                            @for (int i = 0; i < topExplorers.Count; i++)
                            {
                                var explorer = topExplorers[i];
                                var rank = i + 1;
                                var isCurrentUser = explorer.Nickname.Equals(AuthService.CurrentUser?.Nickname, StringComparison.OrdinalIgnoreCase);
                                <div class="leaderboard-entry @(isCurrentUser ? "current-user" : "")" data-testid="leaderboard-entry-@rank">
                                    <div class="rank" data-testid="text-rank-@rank">
                                        @if (rank == 1) { <span>ü•á</span> }
                                        else if (rank == 2) { <span>ü•à</span> }
                                        else if (rank == 3) { <span>ü•â</span> }
                                        else { <span>@rank</span> }
                                    </div>
                                    <div class="explorer-info">
                                        <div class="explorer-name" data-testid="text-explorer-name-@rank">@explorer.Nickname</div>
                                        <div class="explorer-count" data-testid="text-explorer-count-@rank">@explorer.CollectionCount critters</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-data">No explorers yet. Start collecting to be the first!</p>
                    }
                </div>

                <div class="achievements">
                    <h2>üèÜ Achievements</h2>
                    <div class="achievement-list">
                        <div class="achievement @(collectedCount > 0 ? "earned" : "")" data-testid="achievement-1">
                            <span class="achievement-icon">‚≠ê</span>
                            <div class="achievement-info">
                                <h3>First Discovery</h3>
                                <p>Found your first animal</p>
                            </div>
                            @if (collectedCount > 0)
                            {
                                <span class="badge">Earned</span>
                            }
                        </div>
                        <div class="achievement @(collectedCount >= 5 ? "earned" : "")" data-testid="achievement-2">
                            <span class="achievement-icon">‚≠ê</span>
                            <div class="achievement-info">
                                <h3>Collector</h3>
                                <p>Collected 5 animals</p>
                            </div>
                            @if (collectedCount >= 5)
                            {
                                <span class="badge">Earned</span>
                            }
                        </div>
                        <div class="achievement @(collectedCount >= 25 ? "earned" : "")" data-testid="achievement-2">
                            <span class="achievement-icon">‚≠ê</span>
                            <div class="achievement-info">
                                <h3>Hunter</h3>
                                <p>Collected 25 animals</p>
                            </div>
                            @if (collectedCount >= 25)
                            {
                                <span class="badge">Earned</span>
                            }
                        </div>
                        <div class="achievement @(legendaryCount > 0 ? "earned" : "")" data-testid="achievement-3">
                            <span class="achievement-icon">‚≠ê</span>
                            <div class="achievement-info">
                                <h3>Legendary Hunter</h3>
                                <p>Found a legendary animal</p>
                            </div>
                            @if (legendaryCount > 0)
                            {
                                <span class="badge">Earned</span>
                            }
                        </div>
                        <div class="achievement @(legendaryCount == totalLegendaryCount ? "earned" : "")" data-testid="achievement-3">
                            <span class="achievement-icon">üïµÔ∏è</span>
                            <div class="achievement-info">
                                <h3>Cryptozoologist</h3>
                                <p>Discovered all legendary animals</p>
                            </div>
                            @if (legendaryCount == totalLegendaryCount)
                            {
                                <span class="badge">Earned</span>
                            }
                        </div>
                        <div class="achievement @(completionRate == 100 ? "earned" : "")" data-testid="achievement-4">
                            <span class="achievement-icon">‚≠ê</span>
                            <div class="achievement-info">
                                <h3>Explorer</h3>
                                <p>Discovered all species</p>
                            </div>
                            @if (completionRate == 100)
                            {
                                <span class="badge">Earned</span>
                            }
                        </div>
                    </div>
                </div>

                <div class="profile-actions">
                    <button class="btn-secondary" @onclick="HandleSettings" data-testid="button-settings">
                        ‚öôÔ∏è Settings
                    </button>
                    <button class="btn-danger" @onclick="HandleLogout" data-testid="button-logout">
                        üö™ Logout
                    </button>
                </div>
            }
        </div>
    }

    @if (showAuthModal)
    {
        <div class="modal-overlay" @onclick="CloseAuthModal">
            <div class="modal-content auth-modal" @onclick:stopPropagation="true">
                <button class="modal-close" @onclick="CloseAuthModal">√ó</button>
                <h2>@(isLogin ? "Login" : "Sign Up")</h2>
                
                <div class="auth-form">
                    <input type="email" placeholder="Email Address" @bind="username" data-testid="input-username" />
                    <input type="password" placeholder="Password" @bind="password" data-testid="input-password" />
                    @if (!isLogin)
                    {
                        <input type="text" placeholder="Nickname (3-20 characters)" @bind="nickname" data-testid="input-nickname" />
                    }
                    
                    @if (!string.IsNullOrEmpty(authError))
                    {
                        <p class="error">@authError</p>
                    }

                    <button class="btn-primary" @onclick="HandleAuth" data-testid="button-submit-auth">
                        @(isLogin ? "Login" : "Sign Up")
                    </button>
                    
                    <button class="btn-text" @onclick="ToggleAuthMode">
                        @(isLogin ? "Need an account? Sign up" : "Have an account? Login")
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private bool isLoadingLeaderboard = true;
    private bool showAuthModal = false;
    private int collectedCount = 0;
    private int totalCount = 6;
    private int rareCount = 0;
    private int legendaryCount = 0;
    private int totalLegendaryCount = 0;
    private int completionRate = 0;
    private bool isLogin = true;
    private string username = "";
    private string password = "";
    private string nickname = "";
    private string authError = "";
    private List<LeaderboardEntryDTO> topExplorers = new();

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += OnAuthChanged;
        await LoadStats();
        await LoadLeaderboard();
    }

    private async Task LoadStats()
    {
        if (!AuthService.IsAuthenticated)
        {
            isLoading = false;
            return;
        }

        try
        {
            var animals = await Http.GetFromJsonAsync<List<AnimalDTO>>("api/animals");
            if (animals != null)
            {
                collectedCount = animals.Count(a => a.Collected);
                totalCount = animals.Count;
                rareCount = animals.Count(a => a.Collected && a.Rarity == "rare");
                legendaryCount = animals.Count(a => a.Collected && a.Rarity == "legendary");
                totalLegendaryCount = animals.Count(a => a.Rarity == "legendary");
                completionRate = totalCount > 0 ? (int)((collectedCount / (double)totalCount) * 100) : 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading stats: {ex.Message}");
        }
        
        isLoading = false;
    }

    private async Task LoadLeaderboard()
    {
        try
        {
            var leaderboard = await Http.GetFromJsonAsync<List<LeaderboardEntryDTO>>("api/animals/leaderboard");
            if (leaderboard != null)
            {
                topExplorers = leaderboard;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading leaderboard: {ex.Message}");
        }
        
        isLoadingLeaderboard = false;
    }

    private async void OnAuthChanged()
    {
        await LoadStats();
        await LoadLeaderboard();
        StateHasChanged();
    }

    private string GetInitials()
    {
        var displayName = AuthService.CurrentUser?.Nickname ?? "Explorer";
        var parts = displayName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length > 1)
        {
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        }
        return displayName.Substring(0, Math.Min(2, displayName.Length)).ToUpper();
    }

    private void ShowAuth()
    {
        showAuthModal = true;
    }

    private void CloseAuthModal()
    {
        showAuthModal = false;
        authError = "";
    }

    private void ToggleAuthMode()
    {
        isLogin = !isLogin;
        authError = "";
    }

    private async Task HandleAuth()
    {
        authError = "";
        
        try
        {
            AuthResponse result;
            if (isLogin)
            {
                result = await AuthService.LoginAsync(username, password);
            }
            else
            {
                result = await AuthService.RegisterAsync(username, password, nickname);
            }

            if (result.Success)
            {
                CloseAuthModal();
                username = "";
                password = "";
                nickname = "";
                await LoadStats();
            }
            else
            {
                authError = result.Message;
            }
        }
        catch (Exception ex)
        {
            authError = "An error occurred. Please try again.";
            Console.WriteLine($"Auth error: {ex.Message}");
        }
    }

    private void HandleSettings()
    {
        Console.WriteLine("Settings clicked");
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnAuthChanged;
    }
}
